
import os
import glob
import sipconfig
import PyQt4.pyqtconfig

# The name of the SIP build file generated by SIP and used by the build
# system.
build_file = "qgis.sbf"

# Get the SIP configuration information.
config = PyQt4.pyqtconfig.Configuration()

# Get the extra SIP flags needed by the imported qt module.  Note that
# this normally only includes those flags (-x and -t) that relate to SIP's
# versioning system.
qt_sip_flags = config.pyqt_sip_flags

# directory where modules will be installed
mod_dir = os.path.join(config.default_mod_dir, "qgis")

# directory where sip files will be installed
sip_dir = os.path.join(config.default_sip_dir, "qgis")
  
# Run SIP to generate the code.
#os.system(" ".join([config.sip_bin, "-c", ".", "-b", build_file, "-I", config.pyqt_sip_dir, qt_sip_flags, "core.sip"]))
os.system(" ".join([config.sip_bin, "-c", ".", "-b", build_file, "-I", config.pyqt_sip_dir, qt_sip_flags, "gui.sip"]))

# We are going to install the SIP specification file for this module and
# its configuration module.
installs = []

# install all sip files
sips = glob.glob("*.sip")
for sip in sips:
  installs.append([sip, sip_dir])


installs.append([["__init__.py", "qgisconfig.py"], mod_dir])

# Create the Makefile.  The QtModuleMakefile class provided by the
# pyqtconfig module takes care of all the extra preprocessor, compiler and
# linker flags needed by the Qt library.
makefile = sipconfig.ModuleMakefile(
        configuration=config,
        qt=["QtCore","QtGui","QtXml"],
        build_file=build_file,
        installs=installs,
        install_dir=mod_dir
)

# Create the Makefile.
#Makefile = sipconfig.SIPModuleMakefile(config, build_file)

# Add the library we are wrapping.  The name doesn't include any platform
# specific prefixes or extensions (e.g. the "lib" prefix on UNIX, or the
# ".dll" extension on Windows).
makefile.extra_libs = ["qgis_core", "qgis_gui"]
makefile.extra_lib_dirs = ["../build/src/core", "../build/src/gui"]  # TODO: make universal!
makefile.extra_include_dirs = ["../src/core","../src/core/raster","../src/core/renderer","../src/core/symbology","../src/gui",".."]
makefile.extra_cxxflags = ["-DCORE_EXPORT=", "-DGUI_EXPORT="]

# Generate the Makefile itself.
makefile.generate()

# Now we create the configuration module.  This is done by merging a Python
# dictionary (whose values are normally determined dynamically) with a
# (static) template.
content = {
    # Publish where the SIP specifications for this module will be
    # installed.
    "qgis_sip_dir":    config.default_sip_dir,

    "qgis_mod_dir":    mod_dir,

    # Publish the set of SIP flags needed by this module.  As these are the
    # same flags needed by the qt module we could leave it out, but this
    # allows us to change the flags at a later date without breaking
    # scripts that import the configuration module.
    "qgis_sip_flags":  qt_sip_flags
}

# This creates the qgisconfig.py module from the qgisconfig.py.in
# template and the dictionary.
sipconfig.create_config_module("qgisconfig.py", "qgisconfig.py.in", content)

