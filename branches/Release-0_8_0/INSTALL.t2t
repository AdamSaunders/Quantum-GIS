                 Installation Notes for Quantum GIS (QGIS) on windows
                                       Tim Sutton
                                   %%mtime(%m/%d/%Y)

%!encoding: iso-8859-1

=  Introduction  =

% These are comments and will not be generated in any output    -------------------
%This document is in text2tags format. You can generate html, plain text and moinmoin
%formatted documentation by running txt2tags on this document. See the txt2tags home
%page for more details.
%Please insert manual line breaks in this document as it makes diffing for changes
%much easier.
% End of comments                                               -------------------



/!\ Note to document writers: Please use this document as the central place for 
describing build procefures. Please do not remove this notice. 




= Procedure for building under windows build environment using msys =
```
                   Authors and contributors for this section:
                    Tim Sutton, Godofredo Contreras 2006
                      CMake additions Magnus Homann 2007
  With thanks to Tisham Dhar for preparing the initial msys environment
---------------------------------------------------------------------------------
```

== MSYS: ==

MSYS provides a unix style build environment under windows. We have created a zip archive that contains just about all dependencies.

Get this: 

http://qgis.org/uploadfiles/msys/msys.tar.gz

and unpack to c:\msys


/!\ The file above is compressed as gzipped tarball - you can get a free windows application for creating and decompressing files here:

http://www.7-zip.org/


== Qt4.3 ==

Download qt4.3 opensource precompiled edition exe and install (including the 
download and install of mingw) from here:

http://www.trolltech.com/developer/downloads/qt/windows

When the installer will ask for MinGW, you don't need to download and install
it, just point the installer to c:\msys\mingw

When Qt installation is complete:

Edit C:\Qt\4.3.0\bin\qtvars.bat and add the following lines:

set PATH=%PATH%;C:\msys\local\bin;c:\msys\local\lib
set PATH=%PATH%;"C:\Program Files\Subversion\bin"

I suggest you also add C:\Qt\4.3.0\bin\ to your Environment Variables Path in the windows system preferences.

If you plan to do some debugging, you'll need to compile debug version of Qt:
C:\Qt\4.3.0\bin\qtvars.bat compile_debug

== Flex and Bison ==

Get Flex http://sourceforge.net/project/showfiles.php?group_id=23617&package_id=16424 (the zip bin) and extract it into c:\msys\mingw\bin

== Subversion: ==

In order to check out QGIS sources from the repository, you need Subversion
client. This installer should work fine:

http://subversion.tigris.org/files/documents/15/36797/svn-1.4.3-setup.exe


== CMake: ==

CMake is build system used by Quantum GIS. Download it from here:

http://www.cmake.org/files/v2.4/cmake-2.4.6-win32-x86.exe


== QGIS: ==

 * Start a cmd.exe window ( Start -> Run -> cmd.exe )
 * Create development directory and move into it

```
   md c:\dev\cpp
   cd c:\dev\cpp
```
   
 * Check out sources from SVN
 * For svn head:
```
   svn co https://svn.qgis.org/repos/qgis/trunk/qgis
```
 * For svn 0.8 branch
```
 * svn co https://svn.qgis.org/repos/qgis/branches/Release-0_8_0 qgis0.8
```


== Compiling: ==

As a background read http://wiki.qgis.org/qgiswiki/Building_with_CMake

 * Start a cmd.exe window ( Start -> Run -> cmd.exe ) if you don't have one already.
 * Add paths to compiler and our MSYS environment:
  
``` 
   c:\Qt\4.3.0\bin\qtvars.bat
```
 * For ease of use add c:\Qt\4.3.0\bin\ to your system path in system properties so you can just type qtvars.bat when you open the cmd console.
 * Create build directory and set it as current directory:

```
   cd c:\dev\cpp\qgis
   md build
   cd build
```

== Configuration ==

```
   cmakesetup ..
```

 /!\ NOTE: You must include the '..' above.

  * Click 'Configure' button.
  * When asked, you should choose 'MinGW Makefiles' as generator.
   
   There's a problem with MinGW Makefiles on Win2K. If you're compiling on this
   platform, use 'MSYS Makefiles' generator instead.

   All dependencies should be picked up automatically, if you have set
   up the Paths correctly. The only thing you need to change is the
   installation destination (CMAKE_INSTALL_PREFIX) and/or set 'Debug'.
 
   For compatibility with NSIS packaging cripts I recommend to leave the install
   prefix to its default c:\program files\

   When configuration is done, click 'OK' to exit the setup utility.

*) Compilation and installation
 
   make
   make install

*) Run qgis.exe from the directory where it's installed (CMAKE_INSTALL_PREFIX)

   Make sure to copy all .dll:s needed to the same directory as the
   qgis.exe binary is installed to, if not already done so, otherwise
   QGIS will complain about missing libraries when started.

   The best way to do this is to download both the QGIS current release installer package from http://qgis.org/uploadfiles/testbuilds/ and install it. Now copy the installation dir from C:\Program Files\Quantum GIS into c:\Program Files\qgis-0.8.1 (or whatever the current version is. The name should strictly match the version no. After making this copy you can uninstall the release version of QGIS from your c:\Program Files directory using the provided uninstaller. Double check that the Quantum GIS dir is completely gone under program files afterwards.
   
   Another possibility is to run qgis.exe when your path contains
   c:\msys\local\bin and c:\msys\local\lib directories, so the DLLs
   will be used from that place.


== Create the installation package: (optional) ==

Downlad and install NSIS from (http://nsis.sourceforge.net/Main_Page)


Now using windows explorer, enter the win_build directory in your QGIS source tree. Read the READMEfile there and follow the instructions. Next right 
click on qgis.nsi and choose the option 'Compile NSIS Script'. 




= Building on Mac OSX using frameworks and cmake (QGIS > 0.8) =

/!\ This part of this document written and maintained by Tim Sutton, 2007

This is the newer approach to building QGIS (version 0.9 and above). For the older auto tools based approach see further down in this document. In this approach I will try to avoid as much as possible building dependencies from source and rather use frameworks wherever possible.

== Install XCODE ==

I recommend to get the latest xcode dmg from the Apple XDC Web site. Install XCODE after the ~941mb download is complete.

== Install Qt4 from .dmg ==

```
ftp://ftp.trolltech.com/qt/source/qt-mac-opensource-4.2.3.dmg
```

If you want debug libs, Qt also provide a dmg with these:

```
ftp://ftp.trolltech.com/qt/source/qt-mac-opensource-4.2.3-debug-libs.dmg
```

I am going to proceed using only release libs at this stage as the download for the debug dmg is substantially bigger. If you plan to do any debugging though you probably want to get the debug libs dmg. Once downloaded open the dmg and run the installer. Note you need admin access to install.

After installing you need to make two small changes:

First edit ```/Library/Frameworks/QtCore.framework/Headers/qconfig.h``` and change 

/!\ Note this doesnt seem to be needed since version 4.2.3

```
QT_EDITION_UNKNOWN
```
to
```
QT_EDITION_OPENSOURCE
```

Second change the default mkspec symlink so that it points to macx-g++:

```
cd /usr/local/Qt4.2/mkspecs/
sudo rm default
sudo ln -sf macx-g++ default
```


== Install development frameworks for QGIS dependencies ==

Download William Kyngesburye's excellent all in one framework that includes proj, gdal, sqlite3 etc

```
http://www.kyngchaos.com/files/software/unixport/AllFrameworks.dmg
```

Once downloaded, open and install the frameworks.

William provides an additional installer package for Postgresql/PostGIS. Its available here:

```
http://www.kyngchaos.com/software/unixport/postgres
```

There are some additional dependencies that at the time of writing are not provided as frameworks so we will need to build these from source.

=== Additional Dependencies : GSL ===

Retrieve the Gnu Scientific Library from

```
curl -O ftp://ftp.gnu.org/gnu/gsl/gsl-1.8.tar.gz
```

Then extract it and build it to a prefix of /usr/local:

```
tar xvfz gsl-1.8.tar.gz
cd gsl-1.8
./configure --prefix=/usr/local
make
sudo make install
cd ..
```

=== Additional Dependencies : Expat ===

Get the expat sources:

```
http://sourceforge.net/project/showfiles.php?group_id=10127
```

```
tar xvfz expat-2.0.0.tar.gz
cd expat-2.0.0
./configure --prefix=/usr/local
make
sudo make install
cd ..
```

=== Additional Dependencies : SIP ===

Retrieve the python bindings toolkit SIP from

```
curl -O http://www.riverbankcomputing.com/Downloads/sip4/sip-4.5.2.tar.gz
```

Then extract and build it to a prefix of /usr/local:

```
tar xvfz sip-4.5.2.tar.gz
cd sip-4.5.2
python configure.py
make
sudo make install
cd ..
```

=== Additional Dependencies : PyQt ===

Retrieve the python bindings toolkit for Qt from

```
curl -O http://www.riverbankcomputing.com/Downloads/PyQt4/GPL/PyQt-mac-gpl-4.1.1.tar.gz
```

Then extract and build it to a prefix of /usr/local:

```
tar xvfz PyQt-mac-gpl-4.1.1.tar.gz
cd PyQt-mac-gpl-4.1.1
python configure.py
yes
make
sudo make install
cd ..
```

=== Additional Dependencies : Bison ===

The version of bison available by default on Mac OSX is too old so you need to get a more recent one on your system. Download if from:

```
curl -O http://ftp.gnu.org/gnu/bison/bison-2.3.tar.gz
```

Now build and install it to a prefix of /usr/local :

```
tar xvfz bison-2.3.tar.gz
cd bison-2.3
./configure --prefix=/usr/local
make
sudo make install
cd ..
```

== Install CMAKE for OSX ==

Get the latest release from here:

```
http://www.cmake.org/HTML/Download.html
```

At the time of writing the file I grabbed was:

```
curl -O http://www.cmake.org/files/v2.4/cmake-2.4.6-Darwin-universal.dmg
```

Once downloaded open the dmg and run the installer

== Install subversion for OSX ==

The [http://sourceforge.net/projects/macsvn/ MacSVN] project has a downloadable build of svn. If you are a GUI inclined person you may want to grab their gui client too. Get the command line client here:

```
curl -O http://ufpr.dl.sourceforge.net/sourceforge/macsvn/Subversion_1.4.2.zip
```


Once downloaded open the zip file and run the installer.

You also need to install BerkleyDB available from the same [http://sourceforge.net/projects/macsvn/ website]. At the time of writing the file was here:

```
curl -O http://ufpr.dl.sourceforge.net/sourceforge/macsvn/Berkeley_DB_4.5.20.zip
```

Once again unzip this and run the installer therein.

Lastly we need to ensure that the svn commandline executeable is in the path. Add the following line to the end of /etc/bashrc using sudo:

```
sudo vim /etc/bashrc
```

And add this line to the bottom before saving and quiting:

```
export PATH=/usr/local/bin:$PATH:/usr/local/pgsql/bin
```

/usr/local/bin needs to be first in the path so that the newer bison (that will be built from source further down) is found before the bison (which is very old) that is installed by MacOSX


Now close and reopen your shell to get the updated vars.

== Check out QGIS from SVN ==

Now we are going to check out the sources for QGIS. First we will create a directory for working in:

```
mkdir -p ~/dev/cpp
cd ~/dev/cpp
```

Now we check out the sources:

```
svn co https://svn.qgis.org/repos/qgis/trunk/qgis qgis
```

The first time you check out QGIS sources you will probably get a message like this:

```
Error validating server certificate for 'https://svn.qgis.org:443':
 - The certificate is not issued by a trusted authority. Use the
   fingerprint to validate the certificate manually!
Certificate information:
 - Hostname: svn.qgis.org
 - Valid: from Apr  1 00:30:47 2006 GMT until Mar 21 00:30:47 2008 GMT
 - Issuer: Developer Team, Quantum GIS, Anchorage, Alaska, US
 - Fingerprint: 2f:cd:f1:5a:c7:64:da:2b:d1:34:a5:20:c6:15:67:28:33:ea:7a:9b
(R)eject, accept (t)emporarily or accept (p)ermanently?
```

I suggest you press 'p' to accept the key permanently.

== Configure the build ==

CMake supports out of source build so we will create a 'build' dir for the build process

```
cd qgis
mkdir build
cd build
cmake -D CMAKE_INSTALL_PREFIX=$HOME/apps/ ..
```


== GEOS Issues ==

I had some issues with GEOS headers so I made the following edits:

In file /Library/Frameworks/GEOS.framework/Headers/io.h, comment out line 61

In file /Library/Frameworks/GEOS.framework/Headers/geom.h, comment out line 145

== Building ==

Now we can start the build process:

```
make
```

If all built without errors you can then install it:

```
make install
```

